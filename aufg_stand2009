/******************************************************************************

                            Online C Compiler.
                Code, Compile, Run and Debug C program online.
Write your code in this editor and press "Run" button to compile and execute it.

Schreiben Sie ein Programm das zwei Prozesse erzeugt.
Die Prozesse sollen unabhängig voneinander Zufallszahlen zwischen 0 und 100 erstellen.
Über drei Pipes sollen die Zahlen ausgetauscht werden.
Wenn alle Zahlen gleich sind, geben alle Prozesse auf, dass sie gewonnen haben.
*******************************************************************************/


#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <time.h>
#include <sys/wait.h>
#define num_size 1024


char buf[num_size];
time_t* tnow;
int a, b, x;


int main(int argc, char* argv){
    pid_t pid_A, pid_B, pid_C;
    int pipeD[3][2];
    
    srand(time(NULL));
    
    for(int i = 0; i <3; i++) {
        if(pipe(pipeD[i]) < 0) {
            perror("pipe failed");
            return 1;
        }
    }
    
    
    pid_A = fork();
    if(pid_A < 0) {
        return 2;
    }
    if(pid_A == 0) {
        //child process 1
        //close(pipeD[0][1]);
        //close(pipeD[1][1]);
        close(pipeD[0][0]);
        close(pipeD[1][0]);
        close(pipeD[1][1]);
        close(pipeD[2][0]);
        close(pipeD[2][1]);
        
        int a;
        //read(pipeD[0][0], &a, sizeof(int));
        
        a = rand() % 100;
        printf("a1: %d\n", a);
        write(pipeD[1][1], &a, sizeof(int));
        
        //close(pipeD[0][0]);
        close(pipeD[1][1]);
        return 0;
    }
    pid_B = fork();
    if(pid_B < 0) {
        return 3;
    }
    if(pid_B == 0) {
        //child process 2
        close(pipeD[0][0]);
        close(pipeD[0][1]);
        close(pipeD[1][0]);
        close(pipeD[1][1]);
        //close(pipeD[2][1]);
        close(pipeD[2][0]);
        int b;
        //read(pipeD[1][0], &b, sizeof(int));
        
        b = rand() % 100;
        printf("a2: %d\n", b);
        write(pipeD[2][1], &b, sizeof(int));
        
        //close(pipeD[1][0]);
        close(pipeD[2][1]);
        return 0;
    } 
        //parent process
        close(pipeD[0][0]); 
        close(pipeD[0][1]);
        //close(pipeD[1][0]);
        close(pipeD[1][1]);
        close(pipeD[2][1]);
        
        int x[2];
        int y;
        //
        x[0] = rand() % 100;
        //write(pipeD[0][1], &x[0], sizeof(int));
        
        read(pipeD[2][0], &x[1], 2*sizeof(int));
        
        read(pipeD[1][0], &x[0], 2*sizeof(int));
        
        
        printf("x: %d\nx2: %d\n", x[0],x[1]);
        close(pipeD[1][0]);
        close(pipeD[2][0]);
        //close(pipeD[0][1]);
        //close(pipeD[0][0]);
        //pid_t wait(pid_A);
        //pid_t wait(pid_B);
        if(x[0] == x[1]) {
            printf("Gleichheit");
        }
        //exit(0);
        
        wait(NULL);
    
    
    
    
    
    
    return 0;
}
